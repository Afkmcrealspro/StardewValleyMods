<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var generateClasses = new Dictionary<string, string>
    {
        ["CustomBasicFurniture"] = "FurniturePackData",
        ["CustomBedFurniture"] = "FurniturePackData",
        ["CustomBigCraftable"] = "BigCraftablePackData",
        ["CustomBoots"] = "BootsPackData",
        ["CustomCraftingRecipe"] = "CraftingRecipePackData",
        ["CustomCrop"] = "CropPackData",
        ["CustomFence"] = "FencePackData",
        ["CustomFishTankFurniture"] = "FurniturePackData",
        ["CustomFruitTree"] = "FruitTreePackData",
        ["CustomGiantCrop"] = "CropPackData",
        ["CustomHat"] = "HatPackData",
        ["CustomMeleeWeapon"] = "MeleeWeaponPackData",
        ["CustomObject"] = "ObjectPackData",
        ["CustomPants"] = "PantsPackData",
        ["CustomShirt"] = "ShirtPackData",
        ["CustomStorageFurniture"] = "FurniturePackData",
        ["CustomTVFurniture"] = "FurniturePackData"
    };
#>
using System.CodeDom.Compiler;
using System.Xml.Serialization;
using DynamicGameAssets.PackData;
using Netcode;

namespace DynamicGameAssets.Game
{
<#
foreach (var entry in generateClasses)
{
    string itemType = entry.Key;
    string packType = entry.Value;
#>
    [GeneratedCode("TextTemplatingFileGenerator", "1.0.0")]
    public partial class <#= itemType #> : IDGAItem
    {
        public readonly NetString _sourcePack = new();
        public readonly NetString _id = new();
        [XmlIgnore]
        public string SourcePack => this._sourcePack.Value;
        [XmlIgnore]
        public string Id => this._id.Value;
        [XmlIgnore]
        public string FullId => $"{this.SourcePack}/{this.Id}";
        [XmlIgnore]
        public <#= packType #> Data => Mod.Find(this.FullId) as <#= packType #> ?? new <#= packType #>() { pack = Mod.DummyContentPack };

        public <#= itemType #>()
        {
            this.DoInit();
        }

        public <#= itemType #>(<#= packType #> data)
            : this()
        {
            this._sourcePack.Value = data.pack.smapiPack.Manifest.UniqueID;
            this._id.Value = data.ID;
            this.DoInit(data);
        }

        partial void DoInit();

        partial void DoInit(<#= packType #> data);
    }

<#
}
#>
}
